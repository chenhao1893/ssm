<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 扫描controller的注解，别的不扫描 -->
    <context:component-scan base-package="com.itheima.controller"/>

    <!-- 配置视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- JSP文件所在的目录 -->
        <property name="prefix" value="/pages/"/>
        <!-- 文件的后缀名 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--将日志切面类交给spring容器管理-->
    <bean id="loggerAop" class="com.itheima.aop.LogAop"/>
    <!--配合通知-->
    <aop:config>
        <!--切入点-->
        <aop:pointcut id="log_pointcut" expression="execution(* com.itheima.controller.*.*(..))"/>
        <!--配置通知类型，建立切入点和方法之间的联系-->
        <aop:aspect ref="loggerAop">
            <aop:before method="doBefore" pointcut-ref="log_pointcut"/>
            <aop:after method="doAfter" pointcut-ref="log_pointcut"/>
        </aop:aspect>
    </aop:config>

    <!-- 设置静态资源不过滤 -->
    <mvc:default-servlet-handler/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/img/" mapping="/img/**"/>
    <mvc:resources location="/plugins/" mapping="/plugins/**"/>

    <!-- 开启对SpringMVC注解的支持 -->
    <mvc:annotation-driven/>

    <!--
        支持AOP的注解支持，AOP底层使用代理技术
        JDK动态代理，要求必须有接口
        cglib代理，生成子类对象，proxy-target-class="true" 默认使用cglib的方式
    -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>